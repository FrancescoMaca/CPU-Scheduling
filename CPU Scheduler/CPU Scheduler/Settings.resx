<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        AAoAAAAMAAAADAAAAAkAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAVAAAAowAAAMEAAADBAAAAmwAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAADAAAADrAAAA/wAAAP8AAADkAAAAJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAATgAAAPkAAAD/AAAA/wAAAPcAAABHAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAA
        AGkAAABYAAAABgAAAAAAAAAAAAAAAAAAAAAAAABxAAAA/wAAAP8AAAD/AAAA/wAAAG0AAAAAAAAAAAAA
        AAAAAAAAAAAABgAAAFYAAABqAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAcAAAB4AAAA9QAAAPMAAACQAAAAGwAAAAAAAAAMAAAAOgAAALcAAAD/AAAA/wAAAP8AAAD/AAAAtgAA
        ADgAAAAKAAAAAAAAABoAAACNAAAA8QAAAPUAAAB5AAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AA/wIAQP+HgeH/z4Hz//+B////gf///4H/8=
</value>
  </data>
</root>